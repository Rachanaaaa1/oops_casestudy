# -*- coding: utf-8 -*-
"""oops case study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19TfASKXwbNCpjgxinsmoyWFi3seE0MGE
"""

#DOMAIN ENTITIES
class Book:
    def __init__(self, title, author, isbn, publication_date, genre, availability=True):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.publication_date = publication_date
        self.genre = genre
        self.availability = availability


class Journal:
    def __init__(self, title, publisher, issn, publication_frequency):
        self.title = title
        self.publisher = publisher
        self.issn = issn
        self.publication_frequency = publication_frequency


class User:
    def __init__(self, name, contact_info, library_card_number):
        self.name = name
        self.contact_info = contact_info
        self.library_card_number = library_card_number


class LibraryStaff:
    def __init__(self, name, role, contact_info):
        self.name = name
        self.role = role
        self.contact_info = contact_info


class CatalogEntry:
    def __init__(self, item, location, call_number):
        self.item = item
        self.location = location
        self.call_number = call_number


class Transaction:
    def __init__(self, user, item, recieved_date, due_date, is_returned=False, overdue_fine=0):
        self.user = user
        self.item = item
        self.recieved_date = recieved_date
        self.due_date = due_date
        self.is_returned = is_returned
        self.overdue_fine = overdue_fine


class Hold:
    def __init__(self, user, item):
        self.user = user
        self.item = item


class LibraryLocation:
    def __init__(self, name, description):
        self.name = name
        self.description = description


class Vendor:
    def __init__(self, name, contact_info):
        self.name = name
        self.contact_info = contact_info

class Fine:
    def __init__(self, user, amount, reason):
        self.user = user
        self.amount = amount
        self.reason = reason

class DigitalResource:
    def __init__(self, title, access_rights, authentication_method):
        self.title = title
        self.access_rights = access_rights
        self.authentication_method = authentication_method

class LibraryBudget:
    def __init__(self, allocation, expenses):
        self.allocation = allocation
        self.expenses = expenses

class LibraryBoard:
    def __init__(self, members):
        self.members = members

class LibrarySearchIndex:
    def __init__(self, index_data):
        self.index_data = index_data

#CONTROL ENTITIES
class UserInterface:
    def __init__(self):
        pass

    def display_catalog(self, items):
        pass

    def display_user_account(self, user):
        pass

    def handle_user_input(self):
        pass


class BarcodeScanner:
    def __init__(self):
        pass

    def scan_barcode(self, item):
        pass


class RFIDReader:
    def __init__(self):
        pass

    def read_rfid(self, item):
        pass


class LibraryWebsite:
    def __init__(self):
        pass

    def display_resources(self):
        pass

    def show_event_calendar(self):
        pass


class LibraryCard:
    def __init__(self, card_number):
        self.card_number = card_number

    def authenticate(self):
        pass


class BarcodeLabel:
    def __init__(self, barcode):
        self.barcode = barcode


class ExternalDatabase:
    def __init__(self, name, url):
        self.name = name
        self.url = url

    def search_external_database(self, query):
        pass


class EmailNotification:
    def __init__(self):
        pass

    def send_notification(self, recipient, message):
        pass


class LibraryCardAuthenticationServer:
    def __init__(self):
        pass

    def authenticate_user(self, card_number, password):
        pass


class PrinterCopier:
    def __init__(self):
        pass

    def print_document(self, document, user):
        pass

    def photocopy(self, document, user):
        pass


class API:
    def __init__(self, name, endpoint):
        self.name = name
        self.endpoint = endpoint

    def call_api(self, method, params):
        pass

#BOUNDARY ENTITIES
class Librarian:
    def __init__(self, name, role):
        self.name = name
        self.role = role

    def manage_library(self):
        pass


class Patron:
    def __init__(self, name, library_card_number):
        self.name = name
        self.library_card_number = library_card_number

    def borrow_item(self, item):
        pass

    def return_item(self, item):
        pass

class CirculationDeskStaff:
    def __init__(self, name):
        self.name = name

    def issue_library_card(self, patron):
        pass

    def check_out_item(self, item, patron):
        pass

    def check_in_item(self, item):
        pass


class AcquisitionsManager:
    def __init__(self, name):
        self.name = name

    def purchase_item(self, item):
        pass

class TechnologyStaff:
    def __init__(self, name):
        self.name = name

    def maintain_technology(self):
        pass

class SecurityPersonnel:
    def __init__(self, name):
        self.name = name

    def ensure_library_security(self):
        pass

class LibraryBoard:
    def __init__(self, members):
        self.members = members

    def provide_library_oversight(self):
        pass

class BudgetFinanceTeam:
    def __init__(self, members):
        self.members = members

    def manage_library_budget(self):
        pass

class LibraryVolunteer:
    def __init__(self, name):
        self.name = name

    def assist_library(self):
        pass

class AccessibilityCoordinator:
    def __init__(self, name):
        self.name = name

    def ensure_accessibility(self):
        pass

#new revised code with access modifiers
#DOMAIN ENTITY

class Book:
    def __init__(self, title, author, isbn, publication_date, genre, availability=True):
        self.title = title  # Public
        self.author = author  # Public
        self._isbn = isbn  # Protected
        self._publication_date = publication_date  # Protected
        self.genre = genre  # Public
        self.availability = availability  # Public

class Journal:
    def __init__(self, title, publisher, issn, publication_frequency):
        self.title = title  # Public
        self.publisher = publisher  # Public
        self._issn = issn  # Protected
        self._publication_frequency = publication_frequency  # Protected

class User:
    def __init__(self, name, contact_info, library_card_number):
        self.name = name  # Public
        self.contact_info = contact_info  # Public
        self._library_card_number = library_card_number  # Protected

class LibraryStaff:
    def __init__(self, name, role, contact_info):
        self.name = name  # Public
        self.role = role  # Public
        self.contact_info = contact_info  # Public

class CatalogEntry:
    def __init__(self, item, location, call_number):
        self.item = item  # Public
        self.location = location  # Public
        self.call_number = call_number  # Public

class Transaction:
    def __init__(self, user, item, received_date, due_date, is_returned=False, overdue_fine=0):
        self.user = user  # Public
        self.item = item  # Public
        self._received_date = received_date  # Protected
        self._due_date = due_date  # Protected
        self.is_returned = is_returned  # Public
        self.overdue_fine = overdue_fine  # Public

class Hold:
    def __init__(self, user, item):
        self.user = user  # Public
        self.item = item  # Public

class LibraryLocation:
    def __init__(self, name, description):
        self.name = name  # Public
        self.description = description  # Public

class Vendor:
    def __init__(self, name, contact_info):
        self.name = name  # Public
        self.contact_info = contact_info  # Public

class Fine:
    def __init__(self, user, amount, reason):
        self.user = user  # Public
        self.amount = amount  # Public
        self.reason = reason  # Public

class DigitalResource:
    def __init__(self, title, access_rights, authentication_method):
        self.title = title  # Public
        self.access_rights = access_rights  # Public
        self.authentication_method = authentication_method  # Public

class LibraryBudget:
    def __init__(self, allocation, expenses):
        self.allocation = allocation  # Public
        self.expenses = expenses  # Public

class LibraryBoard:
    def __init__(self, members):
        self.members = members  # Public

class LibrarySearchIndex:
    def __init__(self, index_data):
        self.index_data = index_data  # Public

#CONTROL ENTITIES
class UserInterface:
    def __init__(self):
        pass

    def display_catalog(self, items):
        pass  # Public

    def display_user_account(self, user):
        pass  # Public

    def handle_user_input(self):
        pass  # Public


class BarcodeScanner:
    def __init__(self):
        pass

    def scan_barcode(self, item):
        pass  # Public


class RFIDReader:
    def __init__(self):
        pass

    def read_rfid(self, item):
        pass  # Public


class LibraryWebsite:
    def __init__(self):
        pass

    def display_resources(self):
        pass  # Public

    def show_event_calendar(self):
        pass  # Public


class LibraryCard:
    def __init__(self, card_number):
        self.card_number = card_number  # Public

    def authenticate(self):
        pass  # Public


class BarcodeLabel:
    def __init__(self, barcode):
        self.barcode = barcode  # Public


class ExternalDatabase:
    def __init__(self, name, url):
        self.name = name  # Public
        self.url = url  # Public

    def search_external_database(self, query):
        pass  # Public


class EmailNotification:
    def __init__(self):
        pass

    def send_notification(self, recipient, message):
        pass  # Public


class LibraryCardAuthenticationServer:
    def __init__(self):
        pass

    def authenticate_user(self, card_number, password):
        pass  # Public


class PrinterCopier:
    def __init__(self):
        pass

    def print_document(self, document, user):
        pass  # Public

    def photocopy(self, document, user):
        pass  # Public


class API:
    def __init__(self, name, endpoint):
        self.name = name  # Public
        self.endpoint = endpoint  # Public

    def call_api(self, method, params):
        pass  # Public

#BOUNDARY ENTITIES
class Librarian:
    def __init__(self, name, role):
        self.name = name  # Public
        self.role = role  # Public

    def manage_library(self):
        pass  # Public


class Patron:
    def __init__(self, name, library_card_number):
        self.name = name  # Public
        self.library_card_number = library_card_number  # Public

    def borrow_item(self, item):
        pass  # Public

    def return_item(self, item):
        pass  # Public

class CirculationDeskStaff:
    def __init__(self, name):
        self.name = name  # Public

    def issue_library_card(self, patron):
        pass  # Public

    def check_out_item(self, item, patron):
        pass  # Public

    def check_in_item(self, item):
        pass  # Public


class AcquisitionsManager:
    def __init__(self, name):
        self.name = name  # Public

    def purchase_item(self, item):
        pass  # Public

class TechnologyStaff:
    def __init__(self, name):
        self.name = name  # Public

    def maintain_technology(self):
        pass  # Public

class SecurityPersonnel:
    def __init__(self, name):
        self.name = name  # Public

    def ensure_library_security(self):
        pass  # Public

class LibraryBoard:
    def __init__(self, members):
        self.members = members  # Public

    def provide_library_oversight(self):
        pass  # Public

class BudgetFinanceTeam:
    def __init__(self, members):
        self.members = members  # Public

    def manage_library_budget(self):
        pass  # Public

class LibraryVolunteer:
    def __init__(self, name):
        self.name = name  # Public

    def assist_library(self):
        pass  # Public

class AccessibilityCoordinator:
    def __init__(self, name):
        self.name = name  # Public

    def ensure_accessibility(self):
        pass  # Public